import { GoogleGenAI, Type, Modality } from "@google/genai";
import { Product } from '../types';

// Assume API_KEY is set in the environment.
const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

const productSchema = {
  type: Type.ARRAY,
  items: {
    type: Type.OBJECT,
    properties: {
      name: {
        type: Type.STRING,
        description: "A concise, search-friendly name for the product.",
      },
      description: {
        type: Type.STRING,
        description: "A brief, one-sentence description of the product and its appearance in the image.",
      },
    },
    required: ["name", "description"],
  },
};

export async function analyzeImageForProducts(base64ImageData: string): Promise<Product[]> {
  try {
    const imagePart = {
      inlineData: {
        mimeType: 'image/jpeg',
        data: base64ImageData,
      },
    };

    const textPart = {
      text: `Analyze this image, which is a frame from a video. Identify the main, distinct products visible. Exclude generic items like 'a person' or 'a wall'. Focus on specific, searchable goods. For each product, provide a concise name and a short description. If no products are identifiable, return an empty array.`,
    };

    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash',
      contents: { parts: [imagePart, textPart] },
      config: {
        responseMimeType: "application/json",
        responseSchema: productSchema,
      },
    });

    const jsonText = response.text.trim();
    if (!jsonText) {
        console.warn("Gemini returned an empty response.");
        return [];
    }
    
    const products = JSON.parse(jsonText) as Product[];
    return products;

  } catch (error) {
    console.error('Error calling Gemini API for image analysis:', error);
    throw new Error('Failed to analyze image with Gemini API. Please check your API key and network connection.');
  }
}


export async function analyzeVideoForProducts(framesAsBase64: string[]): Promise<Product[]> {
  if (framesAsBase64.length === 0) {
    return [];
  }

  try {
    const textPart = {
      text: `Analyze these sequential frames from a video. Identify the main, distinct products visible across all frames. Consolidate information from all frames to provide a comprehensive list. Avoid duplicating products. If a product is seen from multiple angles, use the information to create a better description. Exclude generic items like 'a person' or 'a wall'. Focus on specific, searchable goods. For each product, provide a concise name and a short description. If no products are identifiable, return an empty array.`,
    };

    const imageParts = framesAsBase64.map(frameData => ({
      inlineData: {
        mimeType: 'image/jpeg',
        data: frameData,
      },
    }));

    const response = await ai.models.generateContent({
      model: 'gemini-2.5-pro',
      contents: { parts: [textPart, ...imageParts] },
      config: {
        responseMimeType: "application/json",
        responseSchema: productSchema,
      },
    });

    const jsonText = response.text.trim();
    if (!jsonText) {
      console.warn("Gemini returned an empty response for video analysis.");
      return [];
    }
    
    const products = JSON.parse(jsonText) as Product[];
    return products;

  } catch (error) {
    console.error('Error calling Gemini API for video analysis:', error);
    throw new Error('Failed to analyze video with Gemini API. Please check your API key and network connection.');
  }
}

export async function generateProductImageView(product: Product): Promise<string> {
  try {
    const textPart = {
      text: `Generate a photorealistic image of the following product on a plain, light-gray background. Show it from a different perspective than a typical front-facing view. Product: "${product.name}". Description: "${product.description}".`,
    };

    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash-image',
      contents: { parts: [textPart] },
      config: {
        responseModalities: [Modality.IMAGE],
      },
    });

    for (const part of response.candidates[0].content.parts) {
      if (part.inlineData) {
        // Return the base64 string directly
        return part.inlineData.data;
      }
    }
    
    throw new Error("No image was generated by the API.");

  } catch (error) {
    console.error('Error calling Gemini API for image generation:', error);
    throw new Error('Failed to generate product image with Gemini API.');
  }
}
